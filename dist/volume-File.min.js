(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["volumeFile"] = factory();
	else
		root["volumeFile"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _obj_Obj_File__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./obj/Obj-File */ "./src/obj/Obj-File.ts");

var volumeFile = {
    getObjFile: function (file) {
        return new _obj_Obj_File__WEBPACK_IMPORTED_MODULE_0__.default(file);
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (volumeFile);


/***/ }),

/***/ "./src/obj/Obj-File.ts":
/*!*****************************!*\
  !*** ./src/obj/Obj-File.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _Obj_Model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Obj-Model */ "./src/obj/Obj-Model.ts");
/* harmony import */ var _Obj_Parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Obj-Parser */ "./src/obj/Obj-Parser.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var ObjFile = /** @class */ (function () {
    function ObjFile(file) {
        this._file = file;
        this._objModel = new _Obj_Model__WEBPACK_IMPORTED_MODULE_0__.default();
        this._objParser = new _Obj_Parser__WEBPACK_IMPORTED_MODULE_1__.OBJParser(this._objModel);
    }
    Object.defineProperty(ObjFile.prototype, "model", {
        get: function () { return this._objModel; },
        enumerable: false,
        configurable: true
    });
    ;
    ObjFile.prototype.read = function () {
        return __awaiter(this, void 0, void 0, function () {
            var gotBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBuffer(this._file)];
                    case 1:
                        gotBuffer = _a.sent();
                        if (gotBuffer) {
                            this._objParser.parse(this._fileReaderResult);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ObjFile.prototype.getBuffer = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var thisObj;
            return __generator(this, function (_a) {
                thisObj = this;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var reader = new FileReader();
                        reader.onload = function () {
                            thisObj._fileReaderResult = reader.result;
                            resolve(true);
                        };
                        reader.onerror = function () {
                            reject(false);
                        };
                        reader.readAsArrayBuffer(file);
                    })];
            });
        });
    };
    return ObjFile;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ObjFile);


/***/ }),

/***/ "./src/obj/Obj-Model.ts":
/*!******************************!*\
  !*** ./src/obj/Obj-Model.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
var ObjModel = /** @class */ (function () {
    function ObjModel() {
    }
    return ObjModel;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ObjModel);


/***/ }),

/***/ "./src/obj/Obj-Parser.ts":
/*!*******************************!*\
  !*** ./src/obj/Obj-Parser.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OBJParser": () => /* binding */ OBJParser
/* harmony export */ });
var StructureSymbols;
(function (StructureSymbols) {
    StructureSymbols["None"] = "";
    //#region Vertex data
    StructureSymbols["Comment"] = "#";
    StructureSymbols["MTLib"] = "mtlib";
    StructureSymbols["ModelName"] = "o";
    StructureSymbols["GeometricVertices"] = "v";
    StructureSymbols["TextureVertices"] = "vt";
    StructureSymbols["VerticesNormals"] = "vn";
    //#endregion
    //#region Elements
    StructureSymbols["Point"] = "p";
    StructureSymbols["Line"] = "l";
    StructureSymbols["Face"] = "f";
    StructureSymbols["Curve"] = "curv";
    //#endregion
})(StructureSymbols || (StructureSymbols = {}));
var ObjFileStructureTokens;
(function (ObjFileStructureTokens) {
    ObjFileStructureTokens[ObjFileStructureTokens["None"] = 0] = "None";
    //#region Vertex data
    ObjFileStructureTokens[ObjFileStructureTokens["Comment"] = 1] = "Comment";
    ObjFileStructureTokens[ObjFileStructureTokens["MTLib"] = 2] = "MTLib";
    ObjFileStructureTokens[ObjFileStructureTokens["ModelName"] = 3] = "ModelName";
    ObjFileStructureTokens[ObjFileStructureTokens["GeometricVertices"] = 4] = "GeometricVertices";
    ObjFileStructureTokens[ObjFileStructureTokens["TextureVertices"] = 5] = "TextureVertices";
    ObjFileStructureTokens[ObjFileStructureTokens["VertexNormals"] = 6] = "VertexNormals";
    //#endregion
    //#region Elements
    ObjFileStructureTokens[ObjFileStructureTokens["Point"] = 7] = "Point";
    ObjFileStructureTokens[ObjFileStructureTokens["Line"] = 8] = "Line";
    ObjFileStructureTokens[ObjFileStructureTokens["Face"] = 9] = "Face";
    ObjFileStructureTokens[ObjFileStructureTokens["Curve"] = 10] = "Curve";
    //#endregion
})(ObjFileStructureTokens || (ObjFileStructureTokens = {}));
var OBJParser = /** @class */ (function () {
    function OBJParser(objModel) {
        this.spaceChar = ' ';
        this.doubleSpaceChar = '  ';
        this.slashChar = '/';
        this.NEWLINE_DEC = 10;
        this.SPACE_DEC = 32;
        this._b_line_i = 0;
        this._indexer = 0;
        this._iobjModel = objModel;
        this.decoder = new TextDecoder("utf-8");
        this._iobjModel.vertices = new Array();
        this._iobjModel.verticesNormals = new Array();
        this._iobjModel.faces = new Array();
    }
    //#region Public Methods
    OBJParser.prototype.parse = function (buffer) {
        var _this = this;
        this._buffInt8Array = new Int8Array(buffer);
        //Structure token
        var structureToken;
        //Index for 'end of file' detection
        var indexer = 0;
        //One hole line
        var line;
        //First two symbols(without spaces) of line
        var tokenSymbols;
        var stringArray = [];
        var faceLineArray = [];
        var _loop_1 = function () {
            //line = this.getLine(this._buffInt8Array, indexer);
            this_1.findBufferNewLine();
            line = this_1.decoder.decode(this_1._buffInt8Array.subarray(this_1._indexer, this_1._b_line_i));
            indexer += line.length + 1;
            this_1._indexer = indexer;
            tokenSymbols = this_1.getTokenSymbols(line);
            line = line.slice(2, line.length);
            switch (tokenSymbols) {
                case StructureSymbols.GeometricVertices:
                    {
                        //Set token
                        structureToken = ObjFileStructureTokens.GeometricVertices;
                        line = this_1.deleteFirstSpaces(line);
                        if (line.includes(this_1.doubleSpaceChar)) {
                            stringArray = line.split(this_1.doubleSpaceChar, 3);
                        }
                        else {
                            stringArray = line.split(this_1.spaceChar, 3);
                        }
                        var newVertices = new Float32Array(stringArray.length);
                        for (var i = 0; i < stringArray.length; i++) {
                            newVertices[i] = parseFloat(stringArray[i]);
                        }
                        this_1._iobjModel.vertices.push(newVertices);
                    }
                    break;
                case StructureSymbols.VerticesNormals:
                    {
                        line = this_1.deleteFirstSpaces(line);
                        if (line.includes(this_1.spaceChar)) {
                            //stringArray = line.split(this.spaceChar, 3);
                            stringArray = this_1.split(line, this_1.spaceChar, 3);
                        }
                        this_1._iobjModel.verticesNormals.push(new Float32Array(stringArray));
                    }
                    break;
                case StructureSymbols.Face:
                    {
                        line = this_1.deleteFirstSpaces(line);
                        if (line.includes(this_1.doubleSpaceChar)) {
                            stringArray = line.split(this_1.doubleSpaceChar, 4);
                        }
                        else {
                            stringArray = line.split(this_1.spaceChar, 4);
                        }
                        if (stringArray[0].includes(this_1.slashChar)) {
                            stringArray.map(function (str, i) { return faceLineArray[i] = str.split(_this.slashChar, 3); });
                        }
                        else {
                            stringArray.map(function (str, i) { return faceLineArray[i] = str.split(_this.spaceChar, 3); });
                        }
                        var oneFaceArray_1 = new Array(faceLineArray.length);
                        faceLineArray.map(function (arr, i) { return oneFaceArray_1[i] = new Int32Array(arr); });
                        for (var i = 0; i < oneFaceArray_1.length; i++) {
                            for (var j = 0; j < oneFaceArray_1[i].length; j++) {
                                oneFaceArray_1[i][j]--;
                            }
                        }
                        this_1._iobjModel.faces.push(oneFaceArray_1);
                    }
                    break;
                default:
                    break;
            }
        };
        var this_1 = this;
        while (indexer <= this._buffInt8Array.byteLength) {
            _loop_1();
        }
    };
    OBJParser.prototype.getTokenSymbols = function (line) {
        var startIndex = 0;
        var i = 0;
        for (; i < line.length; i++) {
            if (line[i] === this.spaceChar) {
                if (startIndex !== -1) {
                    return line.slice(startIndex, i);
                }
                else {
                    continue;
                }
            }
        }
        return line.slice(startIndex, i);
    };
    OBJParser.prototype.getBufferTokenSymbols = function () {
        var firstSymbolIndex = -1;
        var i = this._indexer;
        for (; i < this._buffInt8Array.length; i++) {
            if (this._buffInt8Array[i] === this.SPACE_DEC) {
                if (firstSymbolIndex !== -1) {
                    return this._buffInt8Array.subarray(firstSymbolIndex, i);
                }
                else {
                    continue;
                }
            }
            else {
                firstSymbolIndex = i;
            }
        }
        if (firstSymbolIndex === -1) {
            firstSymbolIndex++;
        }
        return this._buffInt8Array.subarray(firstSymbolIndex, i);
    };
    OBJParser.prototype.findBufferNewLine = function () {
        this._b_line_i = this._indexer;
        for (; this._b_line_i < this._buffInt8Array.byteLength; this._b_line_i++) {
            if (this._buffInt8Array[this._b_line_i] === this.NEWLINE_DEC) {
                break;
            }
        }
        // if(this._b_line_i - this._indexer > this._maxLineLength)
        // {
        //     this._b_line_i = 0;
        // }
    };
    OBJParser.prototype.getLine = function (buffer, startWith, maxLineLength) {
        if (maxLineLength === void 0) { maxLineLength = 30; }
        var i = startWith;
        for (; i < buffer.byteLength; i++) {
            if (buffer[i] === 10) {
                return this.decoder.decode(buffer.subarray(startWith, i));
            }
        }
        return (i - startWith) > maxLineLength ? '' : this.decoder.decode(buffer.subarray(startWith, i));
    };
    OBJParser.prototype.deleteFirstSpaces = function (line) {
        var nSpaces = 0;
        for (var i = 0; i < line.length; i++) {
            if (line[i] === this.spaceChar) {
                nSpaces++;
            }
            else {
                //If first symbol isn't space symbol return just this line
                if (i === 0) {
                    return line;
                }
                return line.slice(nSpaces, line.length);
            }
        }
    };
    OBJParser.prototype.split = function (line, symbol, limit) {
        var retValue = new Array();
        var symbolStart = 0;
        var i = 0;
        for (; i < line.length; i++) {
            if (line[i] !== symbol) {
                symbolStart++;
                continue;
            }
            if (symbolStart > 0 && retValue.length <= limit) {
                retValue.push(line.slice(i - symbolStart, i));
                symbolStart = 0;
            }
        }
        if (symbolStart > 0) {
            retValue.push(line.slice(i - symbolStart, i));
        }
        return retValue;
    };
    return OBJParser;
}());



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/index.ts");
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,